external_components:
  - source: github://jenscski/esphome-components
    components:
      - sh1107_base
      - sh1107_i2c

wifi:
  ssid: NotProgrium
  password: !secret wifi_password

ota:
  password: !secret wifi_password

esphome:
  name: bucket
  comment: Bucket
  on_boot:
    priority: 600
    then:
      - light.turn_on:
          id: status_pixel
          red: 0%
          green: 100%
          blue: 0%
          brightness: 50%
          color_mode: RGB
      - script.execute: screen_timeout

web_server:
  port: 80

api:
  encryption:
    key: dEc+qPgfQV6I/ympSuhFdcliNGss9p9l6twF+e+bqOE=


esp32:
  board: featheresp32-s2

i2c:
  sda: SDA
  scl: SCL

substitutions:
  relay_pin: T10
  button_a_pin: T9
  button_b_pin: GPIO6
  button_c_pin: T5
  status_led_pin: T13
  status_pixel_pin: GPIO33
  etape_pin: T8

status_led:
  pin:
    number: $status_led_pin
    inverted: false

# output:
#   - platform: gpio
#     pin: $relay_pin
#     id: relay_output

switch:
  - platform: gpio
    pin: $relay_pin
    name: "Relay"
    id: relay_switch
    internal: true
    on_turn_on:
      then:
        - light.turn_on:
            id: status_pixel
            red: 0%
            green: 100%
            blue: 0%
            color_mode: RGB
            effect: "Strobe"
    on_turn_off:
      then:
        - light.turn_on:
            id: status_pixel
            red: 0%
            green: 100%
            blue: 0%
            color_mode: RGB
            effect: "None"

  # - platform: output
  #   id: relay_switch
  #   name: "Relay Output"
  #   output: relay_output
  #   on_turn_on:
  #     then:
  #       - light.turn_on:
  #           id: status_pixel
  #           red: 0%
  #           green: 100%
  #           blue: 0%
  #           color_mode: RGB
  #           effect: "Strobe"
  #   on_turn_off:
  #     then:
  #       - light.turn_on:
  #           id: status_pixel
  #           red: 0%
  #           green: 100%
  #           blue: 0%
  #           color_mode: RGB
  #           effect: "None"
  - platform: template
    id: keep_screen_on_switch
    name: "Keep Screen On"
    optimistic: true
    restore_state: true
    on_turn_on:
      then:
        - lambda: |-
            id(oled).turn_on();
    on_turn_off:
      then:
        - script.execute: screen_timeout

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: $status_pixel_pin
    num_leds: 1
    name: "Status Pixel"
    id: status_pixel
    effects:
      - strobe:
          name: "Strobe"
          colors:
            - brightness: 50%
              red: 50%
              green: 0%
              blue: 50%
              duration: 500ms
            - brightness: 0%
              red: 50%
              green: 0%
              blue: 50%
              duration: 250ms

font:
  - file:
      type: gfonts
      family: Roboto
    id: roboto
    size: 16

display:
  - platform: sh1107_i2c
    model: "SH1107 64X128"
    address: 0x3C
    rotation: 90
    id: oled
    pages:
      - id: debug
        lambda: |-
          it.printf(0, 0, id(roboto), TextAlign::TOP_LEFT, "Level: %.0f%%", id(water_level).state);
          it.printf(0, 20, id(roboto), TextAlign::TOP_LEFT, "Vol: %f gal", id(water_volume).state);
          it.printf(0, 40, id(roboto), TextAlign::TOP_LEFT, "Pump: %s", id(relay_switch).state ? "On" : "Off");

binary_sensor:
  - platform: gpio
    id: button_b
    pin:
      number: $button_b_pin
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - lambda: |-
            id(oled).turn_on();
        - script.execute: screen_timeout
  - platform: gpio
    id: button_a
    pin:
      number: $button_a_pin
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - switch.toggle: relay_switch
        - script.execute: screen_timeout

script:
  - id: screen_timeout
    mode: restart
    then:
      - if:
          condition:
            switch.is_off: keep_screen_on_switch
          then:
            - delay: 10s
            - lambda: |-
                id(oled).turn_off();

sensor:
  - platform: resistance
    sensor: etape_source
    configuration: UPSTREAM
    resistor: 2kOhm
    name: Water Volume
    id: water_volume
    reference_voltage: 3.3V
    device_class: water
    unit_of_measurement: gal
    filters:
      - calibrate_linear:
          - 2000.0 -> 0.0
          - 400.0 -> 5.0
      # - lambda: |-
      #     const float etape_min = 2000.0;
      #     const float etape_max = 400.0;
      #     const float etape_range = etape_max - etape_min;
      #     const float etape_percent = (x - etape_min) / etape_range;
      #     ESP_LOGI("custom", "etape_percent: %f", etape_percent);
      #     if (etape_percent > 1.0) return 100.0;
      #     if (etape_percent < 0.0) return 0.0;
      #     return etape_percent * 100.0;

  - platform: adc
    id: etape_source
    pin: $etape_pin
    update_interval: 10s
    attenuation: auto

  - platform: template
    name: Water Level
    id: water_level
    device_class: water
    unit_of_measurement: "%"
    accuracy_decimals: 1
    lambda: |-
      return id(water_volume).state;
    filters:
      - calibrate_linear:
          - 0.0 -> 0.0
          - 5.0 -> 100.0

  # - platform: template
  #   name: "eTape Level"
  #   id: etape_level
  #   lambda: |-
  #     const float etape_min = 2000.0;
  #     const float etape_max = 400.0;
  #     const float etape_range = etape_max - etape_min;
  #     const float etape_percent = (id(etape_resistance).state - etape_min) / etape_range;
  #     ESP_LOGI("custom", "etape_percent: %f", etape_percent);
  #     if (etape_percent > 1.0) return 100.0;
  #     if (etape_percent < 0.0) return 0.0;
  #     return etape_percent * 100.0;
  #   unit_of_measurement: "%"
  #   accuracy_decimals: 1
  #   update_interval: 10s

sprinkler:
  - id: bucket_controller
    name: "Bucket Controller"
    standby_switch: "Bucket Watering Standby"
    valves:
      - valve_switch: "Plants Drip"
        valve_switch_id: relay_switch
        run_duration: 300s


logger:
  level: DEBUG
